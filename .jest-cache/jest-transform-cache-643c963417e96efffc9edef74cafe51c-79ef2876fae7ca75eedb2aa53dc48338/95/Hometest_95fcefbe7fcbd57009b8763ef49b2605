65b9968c0d963d5a780fd77dd6597e15
_getJestObj().mock('../../hooks/useUser', function () {
  return {
    useUser: jest.fn(function () {
      return {
        clearUser: jest.fn(),
        user: {
          idToken: '13456-ID',
          serverAuthCode: '1234',
          user: {
            email: 'nerio@challenge.com',
            familyName: 'Testing',
            givenName: 'Challenge',
            id: '1',
            name: 'test',
            photo: 'https://www.test.com/photo.png'
          }
        }
      };
    })
  };
});
_getJestObj().mock('react-query', function () {
  return Object.assign({}, jest.requireActual('react-query'), {
    useQuery: function useQuery() {
      return mockData;
    }
  });
});
_getJestObj().mock('../../hooks/useFavorites', function () {
  return {
    useFavorites: function useFavorites() {
      return {
        addFavorite: jest.fn(),
        isFavorite: jest.fn(),
        removeFavorite: jest.fn(),
        favorites: []
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Home = require("../Home/Home");
var _native = require("styled-components/native");
var _themeProvider = _interopRequireDefault(require("../../../__mocks__/themeProvider"));
var _data = require("../../../__mocks__/data");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockData = {
  data: _data.currenciesData,
  isLoading: false
};
var mockNavigation = {
  navigate: jest.fn(),
  dispatch: jest.fn(),
  reset: jest.fn(),
  goBack: jest.fn(),
  isFocused: jest.fn(),
  canGoBack: jest.fn(),
  getParent: jest.fn(),
  getState: jest.fn(),
  setParams: jest.fn(),
  getId: jest.fn(),
  setOptions: jest.fn(),
  addListener: jest.fn(),
  removeListener: jest.fn(),
  replace: jest.fn(),
  push: jest.fn(),
  pop: jest.fn(),
  popToTop: jest.fn()
};
var renderHomeComponent = function renderHomeComponent() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.ThemeProvider, {
    theme: _themeProvider.default,
    children: (0, _jsxRuntime.jsx)(_Home.Home, {
      navigation: mockNavigation
    })
  }));
};
describe('Home Component', function () {
  it('should render a snapshot with data', function () {
    var _renderHomeComponent = renderHomeComponent(),
      toJSON = _renderHomeComponent.toJSON;
    expect(toJSON()).toMatchSnapshot();
  });
  it('should navigate when Item press', function () {
    var _renderHomeComponent2 = renderHomeComponent(),
      getByText = _renderHomeComponent2.getByText;
    _reactNative.fireEvent.press(getByText('Bitcoin'));
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Detail', {
      currency: _data.currenciesData[0]
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,